{"version":3,"sources":["components/Display/index.js","components/Buttons/index.js","components/History/index.js","redux/CalculatorReducer.js","helper/index.js","App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Index","props","input","formula","isShowHistory","onBackspace","onShowHistory","className","value","join","readOnly","id","onClick","onDigit","onDecimal","onOperator","onEqual","onParenthesis","onClear","history","onHandleHistoryItem","onClearHistory","historyList","useRef","useEffect","element","scrollWidth","clientWidth","isOverflowX","current","style","overflowX","scrollHeight","clientHeight","isOverflowY","overflowY","ref","map","item","index","key","result","initialState","CalculatorReducer","state","action","type","updateState","getPriority","isNotNumber","isNumber","isOperator","infix2Postfix","arrFormula","stack","forEach","push","length","pulledItem","pop","peekedItem","console","log","evalPostfix","arrPostfix","oldNum","Number","parseFloat","theNum","App","useState","setFormula","setInput","setHistory","afterCalculator","setAfterCalculator","useReducer","dispatch","finalFormula","concat","evaluate","isNaN","newHistory","Display","currentInputLength","slice","Buttons","digit","target","innerText","decimal","includes","operator","parenthesis","arrayOpenParenthesis","match","numOpenPatenthesis","arrayCloseParenthesis","numCloseParenthesis","History","number","getAttribute","Boolean","window","location","hostname","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abc52cad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Index = props => {\r\n    const { input, formula, isShowHistory, onBackspace, onShowHistory } = props;\r\n    return (\r\n        <div className=\"display-toolbar\">\r\n            <form className=\"display\">\r\n                <textarea className=\"display-formula\" value={formula.join('')} readOnly />\r\n                <textarea className=\"display-input\" value={input} readOnly />\r\n            </form>\r\n            <div className=\"toolbar\">\r\n                <div className=\"toolbar-item\" id=\"view-history\" onClick={onShowHistory}>{isShowHistory ? \"View Keypad\" : \"View History\"}</div>\r\n                <span className=\"toolbar-item\"  id=\"backspace\" onClick={onBackspace}><i className=\"fas fa-backspace\"></i></span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Index;","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Index = (props => {\r\n    const { onDigit, onDecimal, onOperator, onEqual, onParenthesis, onClear } = props;\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button id=\"clear\" onClick={onClear}>AC</button>\r\n            <button id=\"parenthesis-open\" onClick={onParenthesis}>(</button>\r\n            <button id=\"parenthesis-close\" onClick={onParenthesis}>)</button>\r\n            <button id=\"divide\" onClick={onOperator}>/</button>\r\n\r\n            <button id=\"seven\" onClick={onDigit}>7</button>\r\n            <button id=\"eight\" onClick={onDigit}>8</button>\r\n            <button id=\"nine\" onClick={onDigit}>9</button>\r\n            <button id=\"multiply\" onClick={onOperator}>x</button>\r\n\r\n            <button id=\"four\" onClick={onDigit}>4</button>\r\n            <button id=\"five\" onClick={onDigit}>5</button>\r\n            <button id=\"six\" onClick={onDigit}>6</button>\r\n            <button id=\"subtract\" onClick={onOperator}>-</button>\r\n\r\n            <button id=\"one\" onClick={onDigit}>1</button>\r\n            <button id=\"two\" onClick={onDigit}>2</button>\r\n            <button id=\"three\" onClick={onDigit}>3</button>\r\n            <button id=\"add\" onClick={onOperator}>+</button>\r\n\r\n            <button id=\"zero\" onClick={onDigit}>0</button>\r\n            <button id=\"decimal\" onClick={onDecimal}>.</button>\r\n            <button id=\"equals\" onClick={onEqual}>=</button>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Index;","import React, { useRef, useEffect } from 'react';\r\nimport './styles.css';\r\n\r\nconst Index = (props => {\r\n    const { isShowHistory, history, onHandleHistoryItem, onEqual, onClearHistory } = props;\r\n    const historyList = useRef('');\r\n\r\n    const isOverflowX = (element) => {\r\n        return element.scrollWidth > element.clientWidth;\r\n    }\r\n    const isOverflowY = (element) => {\r\n        return element.scrollHeight > element.clientHeight;\r\n    }\r\n    const scrollBarHistory = (element) => {\r\n        if(isOverflowX(element)) element.style.overflowX = 'scroll';\r\n        else element.style.overflowX = 'hidden';\r\n        if(isOverflowY(element)) element.style.overflowY = 'scroll'; \r\n        else element.style.overflowY = 'hidden';\r\n    }\r\n    useEffect(() => {\r\n        scrollBarHistory(historyList.current);\r\n    })\r\n    return (\r\n        <div className={`${isShowHistory ? '' : 'hidden'} history`}>\r\n            <div className=\"history-list\" ref={historyList}>\r\n                {history.map((item,index) => {\r\n                    return (\r\n                        <div key={index} className=\"history-item\">\r\n                            <div className=\"history-item-formula\">{item.formula.join('')}</div>\r\n                            <div className=\"history-item-result\" value={item.result} onClick={onHandleHistoryItem}>={item.result}</div>\r\n                            <hr />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"history-btn\">\r\n                <button id=\"clear-history\" onClick={onClearHistory}>Clear</button>\r\n                <button id=\"calculate\" onClick={onEqual}>Equal</button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Index;","export const initialState = {\r\n    isShowHistory: false\r\n}\r\n\r\nconst CalculatorReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ON_SHOW_HISTORY': {\r\n            const updateState = {...state}\r\n            return { ...state, isShowHistory: !updateState.isShowHistory };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default CalculatorReducer;","export const evaluate = arrFormula => {\r\n    const arrPostfix = infix2Postfix(arrFormula);\r\n    return evalPostfix(arrPostfix);\r\n}\r\n\r\nexport const getPriority = input => {\r\n    if(input === 'x' || input === '/') return 2;\r\n    else if(input === '+' || input === '-') return 1;\r\n    return 0; \r\n}\r\n\r\nexport const isNotNumber = input => {\r\n    return input === '(' || input === ')' || input === '+' || input === '-' || input === 'x' || input === '/';\r\n}\r\n\r\nexport const isNumber = input => {\r\n    return !isNotNumber(input);\r\n}\r\n\r\nexport const isOperator = input => {\r\n    return input === '+' || input === '-' || input === 'x' || input === '/';\r\n}\r\n\r\n/**\r\n * @function infix2Postfix\r\n * @param {*} arrFormula \r\n * @summary Ref: https://yinyangit.wordpress.com/2011/01/26/algorithm-chuy%E1%BB%83n-bi%E1%BB%83u-th%E1%BB%A9c-trung-t%E1%BB%91-sang-ti%E1%BB%81n-t%E1%BB%91-va-h%E1%BA%ADu-t%E1%BB%91-b%E1%BA%B1ng-stack/\r\n            –       Nếu là toán hạng: cho ra output.\r\n\r\n            –       Nếu là dấu mở ngoặc “(“: cho vào stack\r\n\r\n            –       Nếu là dấu đóng ngoặc “)”: lấy các toán tử trong stack ra và cho vào output cho đến khi gặp dấu mở ngoặc “(“. (Dấu mở ngoặc cũng phải được đưa ra khỏi stack)\r\n\r\n            –       Nếu là toán tử:\r\n\r\n            Chừng nào ở đỉnh stack là toán tử và toán tử đó có độ ưu tiên lớn hơn hoặc bằng toán tử hiện tại thì lấy toán tử đó ra khỏi stack và cho ra output.\r\n            Đưa toán tử hiện tại vào stack\r\n            Sau khi duyệt hết biểu thức infix, nếu trong stack còn phần tử thì lấy các token trong đó ra và cho lần lượt vào output.\r\n */\r\nexport const infix2Postfix = arrFormula => {\r\n    let result = [],\r\n    stack = [];\r\n    \r\n    arrFormula.forEach(item => {\r\n        if(isNumber(item)) {\r\n            result.push(item);\r\n        } else if(item === '(') {\r\n            stack.push(item);\r\n        } else if(item === ')') {\r\n            while(stack.length > 0) {\r\n                const pulledItem = stack.pop();\r\n                if(pulledItem === '(') {\r\n                    break;\r\n                } else {\r\n                    result.push(pulledItem);\r\n                }\r\n            }\r\n        } else if(isOperator(item)) {\r\n            while(stack.length > 0) {\r\n                const peekedItem = stack[stack.length - 1];\r\n                if(isOperator(peekedItem) && getPriority(peekedItem) >= getPriority(item)) {\r\n                    result.push(peekedItem);\r\n                    stack.pop();\r\n                } else break;\r\n            }\r\n            stack.push(item);\r\n        } else {\r\n            console.log('Something else!!!');\r\n        }\r\n    })\r\n\r\n    while(stack.length > 0) {\r\n        result.push(stack.pop());\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @function evalPostfix\r\n * @param {*} arrPostfix \r\n * @summary Ref: https://yinyangit.wordpress.com/2011/01/27/algorithm-tinh-gia-tri-bieu-thuc-tien-to-va-hau-to/\r\n            Lặp qua các token của của biểu thức postfix từ trái qua phải:\r\n\r\n            –       Nếu là toán hạng: push vào stack\r\n\r\n            –       Nếu là toán tử: pop hai toán hạng trong stack ra và tính giá trị của chúng dựa vào toán tử này. Push kết quả đó lại vào stack.\r\n\r\n            Phần tử còn sót lại trong stack sau vòng lặp chính là kết quả của biểu thức.\r\n */\r\nexport const evalPostfix = arrPostfix => {\r\n    let stack = [];\r\n\r\n    arrPostfix.forEach(item => {\r\n        if(isNumber(item)) {\r\n            stack.push(item);\r\n        } else if(isOperator(item)) {\r\n            const oldNum = Number.parseFloat(stack.pop()),\r\n            theNum = Number.parseFloat(stack.pop());\r\n            let result = '';\r\n\r\n            switch (item) {\r\n                case '+':\r\n                    result = theNum + oldNum;\r\n                    break;\r\n                case '-':\r\n                    result = theNum - oldNum;\r\n                    break;\r\n                case 'x':\r\n                    result = theNum * oldNum;\r\n                    break;\r\n                case '/':\r\n                    result = theNum / oldNum;\r\n                    break;\r\n                default:\r\n                    console.log('Something else!!!');\r\n            }\r\n            stack.push(result + '')\r\n        } else {\r\n            console.log('Something else!!!');\r\n        }\r\n    })\r\n    return Number.parseFloat(stack[0]);\r\n}","import React, { useState, useReducer } from 'react';\nimport Display from './components/Display';\nimport Buttons from './components/Buttons';\nimport History from './components/History';\nimport CalculatorReducer, { initialState } from './redux/CalculatorReducer';\nimport { onShowHistory } from './redux/actions';\nimport { \n  isNotNumber, \n  isOperator, \n  evaluate,\n  isNumber \n} from './helper';\nimport './App.css';\n\nfunction App() {\n  const [formula, setFormula] = useState([]),\n  [input, setInput] = useState('0'),\n  [history, setHistory] = useState([]),\n  [afterCalculator, setAfterCalculator] = useState(false);\n\n  const [state, dispatch] = useReducer(CalculatorReducer, initialState);\n  \n  const onDigit = ({target}) => {\n    const digit = target.innerText;\n    if(afterCalculator) {\n      setInput(digit);\n      setAfterCalculator(false);\n    } else if(input === '0') {\n      setInput(digit)\n    } else if(isNotNumber(input)) {\n      setInput(digit);\n      setFormula(formula.concat(input));\n    } else {\n      setInput(input.concat(digit));\n    };\n  }\n\n  const onDecimal = ({target}) => {\n    const decimal = target.innerText;\n    if(afterCalculator) {\n      setInput(`0${decimal}`);\n      setAfterCalculator(false);\n    } else if(isNotNumber(input)) {\n      setInput(`0${decimal}`);\n      setFormula(formula.concat(input))\n    } else if(!input.includes(decimal)) {\n      setInput(input.concat(decimal));\n    }\n  }\n\n  const onOperator = ({target}) => {\n    const operator = target.innerText;\n    if(isOperator(input)) {\n      setInput(operator);\n      setAfterCalculator(false);\n    } else if(input !== '(') {\n      setFormula(formula.concat(input));\n      setInput(operator);\n      setAfterCalculator(false);\n    }\n  }\n  \n  const onEqual = () => {\n    const finalFormula = formula.concat(input);\n    const result = evaluate(finalFormula)\n    if(!Number.isNaN(result)) {\n      const newHistory = {\n        formula: finalFormula,\n        result\n      }\n      setInput(result + '');\n      setFormula([]);\n      setHistory([].concat(newHistory, history));\n      setAfterCalculator(true);\n    }\n  }\n\n  const onParenthesis = ({target}) => {\n    const parenthesis = target.innerText;\n    if((parenthesis === '(')) {\n      if( (isNumber(input) && input !== '0') || \n      (isNumber(input) && input === '0' && formula.length > 0) || \n      input === ')') {\n        setInput(parenthesis);\n        setFormula(formula.concat([input, 'x']));\n        setAfterCalculator(false);\n      } else if(isOperator(input) || input === '(') {\n        setInput(parenthesis);\n        setFormula(formula.concat(input));\n        setAfterCalculator(false)\n      } else if(isNumber(input) && input === '0' && formula.length === 0) {\n        setInput(parenthesis);\n        setAfterCalculator(false);\n      }\n    } else {\n      const arrayOpenParenthesis = formula.join('').match(/\\(/g);\n      const numOpenPatenthesis = arrayOpenParenthesis ? arrayOpenParenthesis : 0;\n      \n      const arrayCloseParenthesis = formula.join('').match(/\\)/g);\n      const numCloseParenthesis = arrayCloseParenthesis ? arrayCloseParenthesis : 0;\n\n      if(isNumber(input) || ( input === ')' && numOpenPatenthesis > 0 && numOpenPatenthesis > numCloseParenthesis )) {\n        setInput(parenthesis);\n        setFormula(formula.concat(input));\n        setAfterCalculator(false);\n      }\n    }\n  }\n  \n  const onClear = () => {\n    setFormula([]);\n    setInput('0');\n    setAfterCalculator(false);\n  }\n\n  const onBackspace = () => {\n    const currentInputLength = input.length;\n    if(input === 'Infinity' || input === '-Infinity' || input === 'NaN') {\n      setInput('0');\n      setAfterCalculator(false)\n    } else if(currentInputLength > 1) {\n      setInput(input.slice(0, currentInputLength - 1));\n      setAfterCalculator(false);\n    } else if(input !== '0') {\n      setInput('0');\n      setAfterCalculator(false);\n    } else if(formula.length > 0) {\n      setInput(formula[formula.length - 1]);\n      setFormula(formula.slice(0, formula.length - 1));\n      setAfterCalculator(false);\n    }\n  } \n\n  const onHandleHistoryItem = ({target}) => {\n    const number = target.getAttribute('value');\n    if(isNumber(input)) {\n      setInput(number);\n    } else {\n      setInput(number);\n      setFormula(formula.concat(input));\n    }\n  }\n\n  return (\n\n    <div>\n      <div className=\"calculator\">\n        <Display \n          input={input}\n          formula={formula}\n          isShowHistory={state.isShowHistory}\n          onShowHistory={() => dispatch(onShowHistory())}\n          onBackspace={onBackspace}\n        />\n\n        <Buttons \n          onDigit={onDigit}\n          onDecimal={onDecimal}\n          onOperator={onOperator}\n          onEqual={onEqual}\n          onParenthesis={onParenthesis}\n          onClear={onClear}\n        />\n\n        <History \n          isShowHistory={state.isShowHistory}\n          history={history}\n          onHandleHistoryItem={onHandleHistoryItem}\n          onEqual={onEqual}\n          onClearHistory={() => setHistory([])}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as Types from './constants';\r\n\r\nexport const onShowHistory = () => {\r\n    return {\r\n        type: Types.ON_SHOW_HISTORY\r\n    }\r\n}\r\n","export const ON_SHOW_HISTORY = 'ON_SHOW_HISTORY';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport CalculatorReducer from './CalculatorReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    CalculatorReducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redux/reducers';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}